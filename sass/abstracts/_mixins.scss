@use "sass:meta";
@use "sass:math";
@use "sass:map";
@use "breakpoints" as *;
@use "tokens" as *;
@use "functions" as *;

@mixin mq($size) {
  @if map.has-key($breakpoints, $size) {
    $breakpoint: map-get($breakpoints, $size);
    @media screen and (min-width: $breakpoint) {
      @content;
    }
  } @else if meta.type-of($size) == number {
    @if math.is-unitless($size) {
      @error 'when using a number with @mq() make sure to include a unit';
    } @else {
      @media screen and (min-width: $size) {
        @content;
      }
    }
  } @else {
    @error 'the keyword #{$size} is not in the $breakpoints map';
  }
}

//mixin for including current color scheme's variables
@mixin color-scheme($scheme-name) {
  $map: get-scheme($scheme-name);
  @each $color, $shade-map in $map {
    @if ($color != name) {
      @each $shade, $value in $shade-map {
        --#{$color}-#{$shade}: #{$value};
      }
    }
  }
}

@mixin heading($fs, $color: $heading-color-default) {
  font-size: $fs;
  color: $color;

  font-weight: $heading-font-weight;
  line-height: $heading-line-height;
}

@mixin button() {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
  text-decoration: none;
  line-height: 1;
  font-family: $button-font-family;
  font-weight: $button-font-weight;
  padding: $button-padding;
}

@mixin random_sprinkle {
  @for $i from 1 through 8 {
    svg:nth-child(#{$i}) {
      $rotation: math.random() * 360;
      $opacity: math.div((2 + math.random(8)), 10);
      $offset-x: math.div(math.percentage(math.random(100)), 100);
      $offset-y: math.div(math.percentage(math.random(100)), 100);

      top: #{$offset-y};
      left: #{$offset-x};
      transform: rotate(#{$rotation}deg) translate(-50%, -50%);
      opacity: #{$opacity};
    }
  }
}
